PRE-REQUISITES:
DATA COLLECTION
DATA EXPLORATION
DATA PRE - PROCESSING
DATA ANALYSIS
DATA CLEANING
ONE HOT ENCODING
FEATURE ENGINEERING
MODEL BUILDING

LET'S GET STARTED:
#DATA COLLECTION (Importing modules)
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

#DATA EXPLORATION 
df = pd.read_csv("titanic_train_csv.csv")
df
df.head()
df.tail()
df.columns
df.shape
df.info()
df.isnull()
df.isnull().sum()
sns.heatmap(df.isnull())

**How many people were servived and were dead?**
 df['Survived'].value_counts()
 sns.countplot(x = 'Survived', data = df)

**How many Females and Males are survived?**
 df.groupby('Sex')['Survived'].value_counts()
 df.groupby("Survived")['Sex'].value_counts()
 sns.countplot(x = 'Survived', hue = 'Sex', data = df)
 sns.countplot(x = 'Sex', hue = 'Survived', data = df)
 df.head()

**What is the survival rate if the person is male?**
 df['Sex'].value_counts()
 df.groupby('Sex')['Survived'].value_counts()
 (109/577)*100
 df.groupby('Sex')['Survived'].value_counts()[3]
 df['Sex'].value_counts()
 male_survival_rate = (df.groupby('Sex')['Survived'].value_counts()[3]/df['Sex'].value_counts()[0])*100
 male_survival_rate
 
**What is the survival rate if the person is Female?Â¶**
 female_survival_rate = (df.groupby('Sex')['Survived'].value_counts()[0]/df['Sex'].value_counts()[1])*100
 female_survival_rate
 (233/314)*100
 
**How many Females and Males Travelling in different Pclass?**
 df['Pclass'].value_counts()
 df.groupby('Sex')['Pclass'].value_counts()
 sns.countplot(x = 'Sex', hue = 'Pclass', data = df)
 sns.countplot(x = 'Pclass', hue = 'Sex', data = df)
 
 # Check the Fare Price for different classes
 df.groupby('Pclass')['Fare'].value_counts()
 df.head()
 df.groupby('Pclass')['Fare'].mean()
 df.groupby('Pclass')['Fare'].sum()
 df.groupby('Pclass')['Survived'].value_counts()
 
 **How manY people were Travelling alone?What's their survival rate?**
__Hint : The people was Travelling alone has 0 sibsp and 0 parch.__
 
 alone = df[(df['Parch'] == 0) & (df['SibSp'] == 0)]
 alone.count()
 not_alone = df[(df['Parch'] != 0) & (df['SibSp'] != 0)]
 not_alone.count()
 alone.shape
 not_alone.shape
 df.shape
 alone['Survived'].value_counts()
 
 #survival rate =( no.of people survived / total no.of people )*100
 (alone['Survived'].value_counts()[1] / alone.shape[0])*100
 (163 / 537)* 100
 
**How many people was survived Travelling in different Pclass based on gender?**
 pclass_gender = df.groupby(['Pclass','Sex'])['Survived'].value_counts()
 pclass_gender
 
 plt.figure(figsize = (15,5))
 plt.style.use('dark_background')
 df.groupby(['Pclass','Sex'])['Survived'].value_counts().plot(kind = 'bar')
 
 type(pclass_gender)
 df.groupby(['Pclass','Sex'])['Survived'].sum().reset_index()
 
 **Which Pclass contain more fare on the basis of gender?*
 df.groupby(['Pclass','Sex'])['Fare'].value_counts()
 df.groupby(['Pclass','Sex'])['Fare'].mean()
 df.groupby(['Pclass','Sex'])['Fare'].mean().plot(kind = 'bar')
 fare_gender = df.groupby(['Pclass','Sex'])['Fare'].mean().reset_index()
 fare_gender
 sns.barplot(x = 'Pclass', y = 'Fare', hue = 'Sex', data = df)
 
 **What is the survival rate of the person Travelling in Pclass1 and having an Embarked Q?**
 pclass_embarked = df[(df['Pclass'] == 1) & (df['Embarked'] == 'Q')]
 pclass_embarked['Survived'].value_counts()
 (pclass_embarked['Survived'].value_counts()[0] / pclass_embarked['Survived'].count()) * 100
 (1/2)*100
 pclass_embarked['Survived'].value_counts(normalize = True)
 df.head()
 
 **How many children were Travelling ?**
 child = df[df['Age'] < 18]
 adult = df[df['Age'] > 18]
 child.head()
 adult.head()
 child.count()
 child['Age'].count()
 adult.count()
 adult['Age'].count()
 
 **What is the survival rate of female children?**
 child['Survived'].value_counts()
 child.groupby('Sex')['Survived'].value_counts()
 child.groupby('Sex')['Survived'].value_counts(normalize = True)
 (child.groupby('Sex')['Survived'].value_counts()[0] / child['Age'].count()) * 100
 
 **How many children were Travelling Alone and what's their survival rate**
 **How many Adults were Travelling with a Fare more than 100 and in a Embarked of S?**
 child_alone = child[(child['SibSp'] == 0 ) & (child['Parch'] == 0)]
 child[(child['SibSp'] == 0 ) & (child['Parch'] == 0)].shape
 child[(child['SibSp'] == 0 ) & (child['Parch'] == 0)]['Survived'].value_counts()
 child[(child['SibSp'] == 0 ) & (child['Parch'] == 0)]['Survived'].value_counts(normalize = True)
 child_alone['Survived'].count()
 (child[(child['SibSp'] == 0 ) & (child['Parch'] == 0)]['Survived'].value_counts() / child_alone['Survived'].count()) * 100
 (10/23)*100
 
 #DATA CLEANING
 df.isnull().sum()
 df[df['Embarked'].isnull()]
 df['Embarked'].mode()
 #FullFill the Embarked with the 'MODE' because it's categorical 
 df['Embarked'].fillna('S', inplace = True)
 df[df['Embarked'].isnull()]
 # Drop the cabin column? Because it's hard to predict/ guess the 687 rows/instances.
 df.drop(['Cabin'], axis = 1, inplace = True)
 df
 df.isnull().sum()
 df['Age'].mean()
 
 df.groupby('Pclass')['Age'].mean()
 def input_age(cols):
    Age = cols[0]
    Pclass = cols[1]
    if pd.isnull(Age):
        if Pclass == 1:
            return 38.233
        if Pclass == 2:
            return 29.877
        if Pclass == 3:
            return 25.140
    else:
        return Age
    
 df['Age'] = df[['Age', 'Pclass']].apply(input_age,axis=1) 
 df.isnull().sum() 
 
 #ONE HOT ENCODIN'
**We need to convert categorical valuese into NUmerical ones**
#One Hot Enconding
from sklearn.preprocessing import LabelEncoder
lb = LabelEncoder()
df['Sex'] = lb.fit_transform(df['Sex'])
df.head()

df['Embarked'] = lb.fit_transform(df['Embarked'])
df.head()

**Feature Engineering**
df.corr()

plt.figure(figsize = (10,10))
plt.style.use('seaborn-bright')
sns.heatmap(df.corr(), annot = True, cmap = 'rainbow')

df.drop(['Name','PassengerId','Ticket'], axis = 1, inplace = True)
df.head()

#MODEL BUILDING
x = df.drop('Survived', axis = 1)
y = df['Survived']
x.head()
y.head()
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x, y, test_size = 0.2,random_state = 40)
x_train.shape
x_test.shape

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train,y_train)
y_pred = model.predict(x_test)
y_pred
y_test

from sklearn.metrics import accuracy_score 
accuracy_score(y_test,y_pred)*100 


*#? at which random state I get best accuracy.
 #ans:by performing crossvalidation



 
 
 
